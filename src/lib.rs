#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _BOOL_ALIGNMENT: u32 = 1;
pub const _CHAR_ALIGNMENT: u32 = 1;
pub const _SHORT_ALIGNMENT: u32 = 2;
pub const _INT_ALIGNMENT: u32 = 4;
pub const _FLOAT_ALIGNMENT: u32 = 4;
pub const _FLOAT_COMPLEX_ALIGNMENT: u32 = 4;
pub const _LONG_ALIGNMENT: u32 = 8;
pub const _LONG_LONG_ALIGNMENT: u32 = 8;
pub const _DOUBLE_ALIGNMENT: u32 = 8;
pub const _DOUBLE_COMPLEX_ALIGNMENT: u32 = 8;
pub const _LONG_DOUBLE_ALIGNMENT: u32 = 16;
pub const _LONG_DOUBLE_COMPLEX_ALIGNMENT: u32 = 16;
pub const _POINTER_ALIGNMENT: u32 = 8;
pub const _MAX_ALIGNMENT: u32 = 16;
pub const _ALIGNMENT_REQUIRED: u32 = 1;
pub const _LONG_LONG_ALIGNMENT_32: u32 = 4;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const _FILE_OFFSET_BITS: u32 = 64;
pub const _XOPEN_VERSION: u32 = 3;
pub const __EXT1_VISIBLE: u32 = 0;
pub const _DTRACE_VERSION: u32 = 1;
pub const REG_LABEL_PC: u32 = 0;
pub const REG_LABEL_SP: u32 = 1;
pub const REG_LABEL_BP: u32 = 2;
pub const REG_LABEL_RBX: u32 = 3;
pub const REG_LABEL_R12: u32 = 4;
pub const REG_LABEL_R13: u32 = 5;
pub const REG_LABEL_R14: u32 = 6;
pub const REG_LABEL_R15: u32 = 7;
pub const REG_LABEL_MAX: u32 = 8;
pub const _MUTEX_MAGIC: u32 = 19800;
pub const _SEMA_MAGIC: u32 = 21325;
pub const _COND_MAGIC: u32 = 17238;
pub const _RWL_MAGIC: u32 = 21079;
pub const P_MYID: i32 = -1;
pub const __CLOCK_REALTIME0: u32 = 0;
pub const CLOCK_VIRTUAL: u32 = 1;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 2;
pub const CLOCK_REALTIME: u32 = 3;
pub const CLOCK_MONOTONIC: u32 = 4;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 5;
pub const CLOCK_HIGHRES: u32 = 4;
pub const CLOCK_PROF: u32 = 2;
pub const TIMER_RELTIME: u32 = 0;
pub const TIMER_ABSTIME: u32 = 1;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const DST_GB: u32 = 7;
pub const DST_RUM: u32 = 8;
pub const DST_TUR: u32 = 9;
pub const DST_AUSTALT: u32 = 10;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const ITIMER_REALPROF: u32 = 3;
pub const SEC: u32 = 1;
pub const MILLISEC: u32 = 1000;
pub const MICROSEC: u32 = 1000000;
pub const NANOSEC: u32 = 1000000000;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const TIME_UTC: u32 = 1;
pub const FD_SETSIZE: u32 = 65536;
pub const _NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const UUID_LEN: u32 = 16;
pub const UUID_PRINTABLE_STRING_LENGTH: u32 = 37;
pub const EFI_LABEL_SIZE: u32 = 512;
pub const EFI_SIGNATURE: u64 = 6075990659671082565;
pub const EFI_MIN_ARRAY_SIZE: u32 = 16384;
pub const EFI_PART_NAME_LEN: u32 = 36;
pub const EFI_MIN_RESV_SIZE: u32 = 16384;
pub const EFI_VERSION102: u32 = 65538;
pub const EFI_VERSION100: u32 = 65536;
pub const EFI_VERSION_CURRENT: u32 = 65536;
pub const EFI_GPT_PRIMARY_CORRUPT: u32 = 1;
pub const EFI_NUMPAR: u32 = 9;
pub const DKL_MAGIC: u32 = 55998;
pub const FKL_MAGIC: u32 = 255;
pub const NDKMAP: u32 = 16;
pub const DK_LABEL_LOC: u32 = 1;
pub const LEN_DKL_ASCII: u32 = 128;
pub const LEN_DKL_VVOL: u32 = 8;
pub const DK_LABEL_SIZE: u32 = 512;
pub const DK_MAX_BLOCKS: u32 = 2147483647;
pub const DK_ACYL: u32 = 2;
pub const DK_DEVID_BLKSIZE: u32 = 512;
pub const DK_DEVID_REV_MSB: u32 = 0;
pub const DK_DEVID_REV_LSB: u32 = 1;
pub const V_NUMPAR: u32 = 16;
pub const VTOC_SANE: u32 = 1611521774;
pub const V_VERSION: u32 = 1;
pub const V_EXTVERSION: u32 = 1;
pub const V_UNASSIGNED: u32 = 0;
pub const V_BOOT: u32 = 1;
pub const V_ROOT: u32 = 2;
pub const V_SWAP: u32 = 3;
pub const V_USR: u32 = 4;
pub const V_BACKUP: u32 = 5;
pub const V_STAND: u32 = 6;
pub const V_VAR: u32 = 7;
pub const V_HOME: u32 = 8;
pub const V_ALTSCTR: u32 = 9;
pub const V_CACHE: u32 = 10;
pub const V_RESERVED: u32 = 11;
pub const V_SYSTEM: u32 = 12;
pub const V_VXVM_PUB: u32 = 14;
pub const V_VXVM_PRIV: u32 = 15;
pub const V_BIOS_BOOT: u32 = 24;
pub const V_NETBSD_FFS: u32 = 255;
pub const V_FREEBSD_BOOT: u32 = 2304;
pub const V_FREEBSD_SWAP: u32 = 2305;
pub const V_FREEBSD_UFS: u32 = 2306;
pub const V_FREEBSD_VINUM: u32 = 2307;
pub const V_FREEBSD_ZFS: u32 = 2308;
pub const V_FREEBSD_NANDFS: u32 = 2309;
pub const V_UNKNOWN: u32 = 65535;
pub const V_UNMNT: u32 = 1;
pub const V_RONLY: u32 = 16;
pub const VT_ERROR: i32 = -2;
pub const VT_EIO: i32 = -3;
pub const VT_EINVAL: i32 = -4;
pub const VT_ENOTSUP: i32 = -5;
pub const VT_ENOSPC: i32 = -6;
pub const VT_EOVERFLOW: i32 = -7;
pub const CK_CHECKSUM: u32 = 0;
pub const CK_MAKESUM: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _label_t {
    pub val: [::std::os::raw::c_long; 8usize],
}
#[test]
fn bindgen_test_layout__label_t() {
    const UNINIT: ::std::mem::MaybeUninit<_label_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_label_t>(),
        64usize,
        concat!("Size of: ", stringify!(_label_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_label_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_label_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_label_t),
            "::",
            stringify!(val)
        )
    );
}
pub type label_t = _label_t;
pub type lock_t = ::std::os::raw::c_uchar;
pub type intmax_t = i64;
pub type uintmax_t = u64;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type longlong_t = ::std::os::raw::c_longlong;
pub type u_longlong_t = ::std::os::raw::c_ulonglong;
pub type t_scalar_t = i32;
pub type t_uscalar_t = u32;
pub type uchar_t = ::std::os::raw::c_uchar;
pub type ushort_t = ::std::os::raw::c_ushort;
pub type uint_t = ::std::os::raw::c_uint;
pub type ulong_t = ::std::os::raw::c_ulong;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = ::std::os::raw::c_long;
pub type cnt_t = ::std::os::raw::c_short;
pub type pfn_t = ulong_t;
pub type pgcnt_t = ulong_t;
pub type spgcnt_t = ::std::os::raw::c_long;
pub type use_t = uchar_t;
pub type sysid_t = ::std::os::raw::c_short;
pub type index_t = ::std::os::raw::c_short;
pub type timeout_id_t = *mut ::std::os::raw::c_void;
pub type bufcall_id_t = *mut ::std::os::raw::c_void;
pub type off_t = ::std::os::raw::c_long;
pub type off64_t = off_t;
pub type ino_t = ulong_t;
pub type blkcnt_t = ::std::os::raw::c_long;
pub type fsblkcnt_t = ulong_t;
pub type fsfilcnt_t = ulong_t;
pub type ino64_t = ino_t;
pub type blkcnt64_t = blkcnt_t;
pub type fsblkcnt64_t = fsblkcnt_t;
pub type fsfilcnt64_t = fsfilcnt_t;
pub type blksize_t = ::std::os::raw::c_int;
pub const boolean_t_B_FALSE: boolean_t = 0;
pub const boolean_t_B_TRUE: boolean_t = 1;
pub const boolean_t__B_FALSE: boolean_t = 0;
pub const boolean_t__B_TRUE: boolean_t = 1;
pub type boolean_t = ::std::os::raw::c_uint;
pub type pad64_t = i64;
pub type upad64_t = u64;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union pad128_t {
    pub _q: u128,
    pub _l: [i32; 4usize],
}
#[test]
fn bindgen_test_layout_pad128_t() {
    const UNINIT: ::std::mem::MaybeUninit<pad128_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pad128_t>(),
        16usize,
        concat!("Size of: ", stringify!(pad128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pad128_t>(),
        16usize,
        concat!("Alignment of ", stringify!(pad128_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pad128_t),
            "::",
            stringify!(_q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pad128_t),
            "::",
            stringify!(_l)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union upad128_t {
    pub _q: u128,
    pub _l: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_upad128_t() {
    const UNINIT: ::std::mem::MaybeUninit<upad128_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<upad128_t>(),
        16usize,
        concat!("Size of: ", stringify!(upad128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<upad128_t>(),
        16usize,
        concat!("Alignment of ", stringify!(upad128_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(upad128_t),
            "::",
            stringify!(_q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(upad128_t),
            "::",
            stringify!(_l)
        )
    );
}
pub type offset_t = longlong_t;
pub type u_offset_t = u_longlong_t;
pub type len_t = u_longlong_t;
pub type diskaddr_t = u_longlong_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union lloff_t {
    pub _f: offset_t,
    pub _p: lloff_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lloff_t__bindgen_ty_1 {
    pub _l: i32,
    pub _u: i32,
}
#[test]
fn bindgen_test_layout_lloff_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<lloff_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lloff_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(lloff_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<lloff_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(lloff_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lloff_t__bindgen_ty_1),
            "::",
            stringify!(_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lloff_t__bindgen_ty_1),
            "::",
            stringify!(_u)
        )
    );
}
#[test]
fn bindgen_test_layout_lloff_t() {
    const UNINIT: ::std::mem::MaybeUninit<lloff_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lloff_t>(),
        8usize,
        concat!("Size of: ", stringify!(lloff_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lloff_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lloff_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lloff_t),
            "::",
            stringify!(_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lloff_t),
            "::",
            stringify!(_p)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lldaddr_t {
    pub _f: longlong_t,
    pub _p: lldaddr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldaddr_t__bindgen_ty_1 {
    pub _l: i32,
    pub _u: i32,
}
#[test]
fn bindgen_test_layout_lldaddr_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<lldaddr_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldaddr_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(lldaddr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<lldaddr_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(lldaddr_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldaddr_t__bindgen_ty_1),
            "::",
            stringify!(_l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._u) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lldaddr_t__bindgen_ty_1),
            "::",
            stringify!(_u)
        )
    );
}
#[test]
fn bindgen_test_layout_lldaddr_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldaddr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldaddr_t>(),
        8usize,
        concat!("Size of: ", stringify!(lldaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldaddr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldaddr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldaddr_t),
            "::",
            stringify!(_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldaddr_t),
            "::",
            stringify!(_p)
        )
    );
}
pub type k_fltset_t = uint_t;
pub type id_t = ::std::os::raw::c_int;
pub type lgrp_id_t = id_t;
pub type useconds_t = uint_t;
pub type suseconds_t = ::std::os::raw::c_long;
pub type major_t = uint_t;
pub type minor_t = uint_t;
pub type pri_t = ::std::os::raw::c_short;
pub type cpu_flag_t = ushort_t;
pub type o_mode_t = ushort_t;
pub type o_dev_t = ::std::os::raw::c_short;
pub type o_uid_t = ushort_t;
pub type o_gid_t = o_uid_t;
pub type o_nlink_t = ::std::os::raw::c_short;
pub type o_pid_t = ::std::os::raw::c_short;
pub type o_ino_t = ushort_t;
pub type key_t = ::std::os::raw::c_int;
pub type mode_t = uint_t;
pub type uid_t = ::std::os::raw::c_uint;
pub type gid_t = uid_t;
pub type datalink_id_t = u32;
pub type vrid_t = u32;
pub type taskid_t = id_t;
pub type projid_t = id_t;
pub type poolid_t = id_t;
pub type zoneid_t = id_t;
pub type ctid_t = id_t;
pub type pthread_t = uint_t;
pub type pthread_key_t = uint_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _pthread_mutex {
    pub __pthread_mutex_flags: _pthread_mutex__bindgen_ty_1,
    pub __pthread_mutex_lock: _pthread_mutex__bindgen_ty_2,
    pub __pthread_mutex_data: upad64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_mutex__bindgen_ty_1 {
    pub __pthread_mutex_flag1: u16,
    pub __pthread_mutex_flag2: u8,
    pub __pthread_mutex_ceiling: u8,
    pub __pthread_mutex_type: u16,
    pub __pthread_mutex_magic: u16,
}
#[test]
fn bindgen_test_layout__pthread_mutex__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutex__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutex__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_mutex__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutex__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_pthread_mutex__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_flag1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_flag1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_flag2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_flag2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_ceiling) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_ceiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_magic) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_magic)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _pthread_mutex__bindgen_ty_2 {
    pub __pthread_mutex_lock64: _pthread_mutex__bindgen_ty_2__bindgen_ty_1,
    pub __pthread_mutex_lock32: _pthread_mutex__bindgen_ty_2__bindgen_ty_2,
    pub __pthread_mutex_owner64: upad64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_mutex__bindgen_ty_2__bindgen_ty_1 {
    pub __pthread_mutex_pad: [u8; 8usize],
}
#[test]
fn bindgen_test_layout__pthread_mutex__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutex__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutex__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutex__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__pthread_mutex_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_mutex__bindgen_ty_2__bindgen_ty_2 {
    pub __pthread_ownerpid: u32,
    pub __pthread_lockword: u32,
}
#[test]
fn bindgen_test_layout__pthread_mutex__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutex__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutex__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutex__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_ownerpid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(__pthread_ownerpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_lockword) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(__pthread_lockword)
        )
    );
}
#[test]
fn bindgen_test_layout__pthread_mutex__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutex__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutex__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_mutex__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutex__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_mutex__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_lock64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2),
            "::",
            stringify!(__pthread_mutex_lock64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_lock32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2),
            "::",
            stringify!(__pthread_mutex_lock32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_owner64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex__bindgen_ty_2),
            "::",
            stringify!(__pthread_mutex_owner64)
        )
    );
}
#[test]
fn bindgen_test_layout__pthread_mutex() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutex>(),
        24usize,
        concat!("Size of: ", stringify!(_pthread_mutex))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutex>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_mutex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex),
            "::",
            stringify!(__pthread_mutex_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_lock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex),
            "::",
            stringify!(__pthread_mutex_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutex_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutex),
            "::",
            stringify!(__pthread_mutex_data)
        )
    );
}
pub type pthread_mutex_t = _pthread_mutex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cond {
    pub __pthread_cond_flags: _pthread_cond__bindgen_ty_1,
    pub __pthread_cond_data: upad64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cond__bindgen_ty_1 {
    pub __pthread_cond_flag: [u8; 4usize],
    pub __pthread_cond_type: u16,
    pub __pthread_cond_magic: u16,
}
#[test]
fn bindgen_test_layout__pthread_cond__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cond__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cond__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_cond__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cond__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_pthread_cond__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_cond_flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cond__bindgen_ty_1),
            "::",
            stringify!(__pthread_cond_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_cond_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cond__bindgen_ty_1),
            "::",
            stringify!(__pthread_cond_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_cond_magic) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cond__bindgen_ty_1),
            "::",
            stringify!(__pthread_cond_magic)
        )
    );
}
#[test]
fn bindgen_test_layout__pthread_cond() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cond> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cond>(),
        16usize,
        concat!("Size of: ", stringify!(_pthread_cond))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cond>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cond))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_cond_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cond),
            "::",
            stringify!(__pthread_cond_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_cond_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cond),
            "::",
            stringify!(__pthread_cond_data)
        )
    );
}
pub type pthread_cond_t = _pthread_cond;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _pthread_rwlock {
    pub __pthread_rwlock_readers: i32,
    pub __pthread_rwlock_type: u16,
    pub __pthread_rwlock_magic: u16,
    pub __pthread_rwlock_mutex: pthread_mutex_t,
    pub __pthread_rwlock_readercv: pthread_cond_t,
    pub __pthread_rwlock_writercv: pthread_cond_t,
}
#[test]
fn bindgen_test_layout__pthread_rwlock() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_rwlock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_rwlock>(),
        64usize,
        concat!("Size of: ", stringify!(_pthread_rwlock))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_rwlock>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_rwlock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_magic) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_mutex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_readercv) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_readercv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlock_writercv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlock),
            "::",
            stringify!(__pthread_rwlock_writercv)
        )
    );
}
pub type pthread_rwlock_t = _pthread_rwlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_barrier_t {
    pub __pthread_barrier_count: u32,
    pub __pthread_barrier_current: u32,
    pub __pthread_barrier_cycle: upad64_t,
    pub __pthread_barrier_reserved: upad64_t,
    pub __pthread_barrier_lock: pthread_mutex_t,
    pub __pthread_barrier_cond: pthread_cond_t,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        64usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_current) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_cycle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrier_cond) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__pthread_barrier_cond)
        )
    );
}
pub type pthread_spinlock_t = pthread_mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_attr {
    pub __pthread_attrp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__pthread_attr() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_attr>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_attrp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_attr),
            "::",
            stringify!(__pthread_attrp)
        )
    );
}
pub type pthread_attr_t = _pthread_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_mutexattr {
    pub __pthread_mutexattrp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__pthread_mutexattr() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_mutexattr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_mutexattr>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_mutexattr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_mutexattr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_mutexattr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_mutexattrp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_mutexattr),
            "::",
            stringify!(__pthread_mutexattrp)
        )
    );
}
pub type pthread_mutexattr_t = _pthread_mutexattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_condattr {
    pub __pthread_condattrp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__pthread_condattr() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_condattr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_condattr>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_condattr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_condattr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_condattr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_condattrp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_condattr),
            "::",
            stringify!(__pthread_condattrp)
        )
    );
}
pub type pthread_condattr_t = _pthread_condattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _once {
    pub __pthread_once_pad: [upad64_t; 4usize],
}
#[test]
fn bindgen_test_layout__once() {
    const UNINIT: ::std::mem::MaybeUninit<_once> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_once>(),
        32usize,
        concat!("Size of: ", stringify!(_once))
    );
    assert_eq!(
        ::std::mem::align_of::<_once>(),
        8usize,
        concat!("Alignment of ", stringify!(_once))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_once_pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_once),
            "::",
            stringify!(__pthread_once_pad)
        )
    );
}
pub type pthread_once_t = _once;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_rwlockattr {
    pub __pthread_rwlockattrp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__pthread_rwlockattr() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_rwlockattr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_rwlockattr>(),
        8usize,
        concat!("Size of: ", stringify!(_pthread_rwlockattr))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_rwlockattr>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_rwlockattr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_rwlockattrp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_rwlockattr),
            "::",
            stringify!(__pthread_rwlockattrp)
        )
    );
}
pub type pthread_rwlockattr_t = _pthread_rwlockattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr_t {
    pub __pthread_barrierattrp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pthread_barrierattrp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__pthread_barrierattrp)
        )
    );
}
pub type dev_t = ulong_t;
pub type nlink_t = uint_t;
pub type pid_t = ::std::os::raw::c_int;
pub type time_t = ::std::os::raw::c_long;
pub type clock_t = ::std::os::raw::c_long;
pub type clockid_t = ::std::os::raw::c_int;
pub type timer_t = ::std::os::raw::c_int;
pub type unchar = ::std::os::raw::c_uchar;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type ulong = ::std::os::raw::c_ulong;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _quad {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__quad() {
    const UNINIT: ::std::mem::MaybeUninit<_quad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_quad>(),
        8usize,
        concat!("Size of: ", stringify!(_quad))
    );
    assert_eq!(
        ::std::mem::align_of::<_quad>(),
        4usize,
        concat!("Alignment of ", stringify!(_quad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_quad),
            "::",
            stringify!(val)
        )
    );
}
pub type quad_t = _quad;
pub type quad = quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type timespec_t = timespec;
pub type timestruc_t = timespec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
pub type itimerspec_t = itimerspec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type hrtime_t = longlong_t;
extern "C" {
    pub fn adjtime(arg1: *mut timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *mut itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethrtime() -> hrtime_t;
}
extern "C" {
    pub fn gethrvtime() -> hrtime_t;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
    pub __sigev_pad2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        40usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigev_pad2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(__sigev_pad2)
        )
    );
}
extern "C" {
    pub fn clock_getres(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(arg1: clockid_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        arg1: clockid_t,
        arg2: *mut sigevent,
        arg3: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(arg1: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(arg1: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(arg1: timer_t, arg2: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        arg1: timer_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const itimerspec,
        arg4: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(arg1: *const timespec, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        arg1: clockid_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const timespec,
        arg4: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn _sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn cftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *const time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const tm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut altzone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _locale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _locale;
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn timespec_get(arg1: *mut timespec, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigset_t {
    pub __sigbits: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigset_t>(),
        16usize,
        concat!("Size of: ", stringify!(sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sigset_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigbits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigset_t),
            "::",
            stringify!(__sigbits)
        )
    );
}
pub type fd_mask = ::std::os::raw::c_long;
pub type fds_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [::std::os::raw::c_long; 1024usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        8192usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type in_port_t = u16;
pub type in_addr_t = u32;
extern "C" {
    pub fn htonl(arg1: u32) -> u32;
}
extern "C" {
    pub fn htons(arg1: u16) -> u16;
}
extern "C" {
    pub fn ntohl(arg1: u32) -> u32;
}
extern "C" {
    pub fn ntohs(arg1: u16) -> u16;
}
extern "C" {
    pub fn htonll(arg1: u64) -> u64;
}
extern "C" {
    pub fn ntohll(arg1: u64) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid_node_t {
    pub nodeID: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_uuid_node_t() {
    const UNINIT: ::std::mem::MaybeUninit<uuid_node_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uuid_node_t>(),
        6usize,
        concat!("Size of: ", stringify!(uuid_node_t))
    );
    assert_eq!(
        ::std::mem::align_of::<uuid_node_t>(),
        1usize,
        concat!("Alignment of ", stringify!(uuid_node_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid_node_t),
            "::",
            stringify!(nodeID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid {
    pub time_low: u32,
    pub time_mid: u16,
    pub time_hi_and_version: u16,
    pub clock_seq_hi_and_reserved: u8,
    pub clock_seq_low: u8,
    pub node_addr: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_uuid() {
    const UNINIT: ::std::mem::MaybeUninit<uuid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<uuid>(),
        16usize,
        concat!("Size of: ", stringify!(uuid))
    );
    assert_eq!(
        ::std::mem::align_of::<uuid>(),
        4usize,
        concat!("Alignment of ", stringify!(uuid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(time_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_mid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(time_mid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_hi_and_version) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(time_hi_and_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock_seq_hi_and_reserved) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(clock_seq_hi_and_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock_seq_low) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(clock_seq_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_addr) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(uuid),
            "::",
            stringify!(node_addr)
        )
    );
}
pub type uuid_t = [uchar_t; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efi_gpt {
    pub efi_gpt_Signature: u64,
    pub efi_gpt_Revision: uint_t,
    pub efi_gpt_HeaderSize: uint_t,
    pub efi_gpt_HeaderCRC32: uint_t,
    pub efi_gpt_Reserved1: uint_t,
    pub efi_gpt_MyLBA: diskaddr_t,
    pub efi_gpt_AlternateLBA: diskaddr_t,
    pub efi_gpt_FirstUsableLBA: diskaddr_t,
    pub efi_gpt_LastUsableLBA: diskaddr_t,
    pub efi_gpt_DiskGUID: uuid,
    pub efi_gpt_PartitionEntryLBA: diskaddr_t,
    pub efi_gpt_NumberOfPartitionEntries: uint_t,
    pub efi_gpt_SizeOfPartitionEntry: uint_t,
    pub efi_gpt_PartitionEntryArrayCRC32: uint_t,
    pub efi_gpt_Reserved2: [::std::os::raw::c_char; 420usize],
}
#[test]
fn bindgen_test_layout_efi_gpt() {
    const UNINIT: ::std::mem::MaybeUninit<efi_gpt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<efi_gpt>(),
        512usize,
        concat!("Size of: ", stringify!(efi_gpt))
    );
    assert_eq!(
        ::std::mem::align_of::<efi_gpt>(),
        8usize,
        concat!("Alignment of ", stringify!(efi_gpt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_Signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_Signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_Revision) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_Revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_HeaderSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_HeaderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_HeaderCRC32) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_HeaderCRC32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_Reserved1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_Reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_MyLBA) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_MyLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_AlternateLBA) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_AlternateLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_FirstUsableLBA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_FirstUsableLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_LastUsableLBA) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_LastUsableLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_DiskGUID) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_DiskGUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_PartitionEntryLBA) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_PartitionEntryLBA)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).efi_gpt_NumberOfPartitionEntries) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_NumberOfPartitionEntries)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).efi_gpt_SizeOfPartitionEntry) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_SizeOfPartitionEntry)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).efi_gpt_PartitionEntryArrayCRC32) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_PartitionEntryArrayCRC32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpt_Reserved2) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpt),
            "::",
            stringify!(efi_gpt_Reserved2)
        )
    );
}
pub type efi_gpt_t = efi_gpt;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct efi_gpe_Attrs {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[test]
fn bindgen_test_layout_efi_gpe_Attrs() {
    assert_eq!(
        ::std::mem::size_of::<efi_gpe_Attrs>(),
        8usize,
        concat!("Size of: ", stringify!(efi_gpe_Attrs))
    );
    assert_eq!(
        ::std::mem::align_of::<efi_gpe_Attrs>(),
        4usize,
        concat!("Alignment of ", stringify!(efi_gpe_Attrs))
    );
}
impl efi_gpe_Attrs {
    #[inline]
    pub fn PartitionAttrs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_PartitionAttrs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn RequiredPartition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RequiredPartition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PartitionAttrs: u32,
        Reserved2: u32,
        Reserved1: u32,
        RequiredPartition: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let PartitionAttrs: u32 = unsafe { ::std::mem::transmute(PartitionAttrs) };
            PartitionAttrs as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let Reserved2: u32 = unsafe { ::std::mem::transmute(Reserved2) };
            Reserved2 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 31u8, {
            let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let RequiredPartition: u32 = unsafe { ::std::mem::transmute(RequiredPartition) };
            RequiredPartition as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type efi_gpe_Attrs_t = efi_gpe_Attrs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efi_gpe {
    pub efi_gpe_PartitionTypeGUID: uuid,
    pub efi_gpe_UniquePartitionGUID: uuid,
    pub efi_gpe_StartingLBA: diskaddr_t,
    pub efi_gpe_EndingLBA: diskaddr_t,
    pub efi_gpe_Attributes: efi_gpe_Attrs_t,
    pub efi_gpe_PartitionName: [ushort_t; 36usize],
}
#[test]
fn bindgen_test_layout_efi_gpe() {
    const UNINIT: ::std::mem::MaybeUninit<efi_gpe> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<efi_gpe>(),
        128usize,
        concat!("Size of: ", stringify!(efi_gpe))
    );
    assert_eq!(
        ::std::mem::align_of::<efi_gpe>(),
        8usize,
        concat!("Alignment of ", stringify!(efi_gpe))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_PartitionTypeGUID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_PartitionTypeGUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_UniquePartitionGUID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_UniquePartitionGUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_StartingLBA) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_StartingLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_EndingLBA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_EndingLBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_Attributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_Attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_gpe_PartitionName) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(efi_gpe),
            "::",
            stringify!(efi_gpe_PartitionName)
        )
    );
}
pub type efi_gpe_t = efi_gpe;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_part {
    pub p_start: diskaddr_t,
    pub p_size: diskaddr_t,
    pub p_guid: uuid,
    pub p_tag: ushort_t,
    pub p_flag: ushort_t,
    pub p_name: [::std::os::raw::c_char; 36usize],
    pub p_uguid: uuid,
    pub p_resv: [uint_t; 8usize],
}
#[test]
fn bindgen_test_layout_dk_part() {
    const UNINIT: ::std::mem::MaybeUninit<dk_part> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_part>(),
        120usize,
        concat!("Size of: ", stringify!(dk_part))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_part>(),
        8usize,
        concat!("Alignment of ", stringify!(dk_part))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_guid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_tag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_uguid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_uguid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_resv) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_part),
            "::",
            stringify!(p_resv)
        )
    );
}
pub type dk_part_t = dk_part;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_gpt {
    pub efi_version: uint_t,
    pub efi_nparts: uint_t,
    pub efi_part_size: uint_t,
    pub efi_lbasize: uint_t,
    pub efi_last_lba: diskaddr_t,
    pub efi_first_u_lba: diskaddr_t,
    pub efi_last_u_lba: diskaddr_t,
    pub efi_disk_uguid: uuid,
    pub efi_flags: uint_t,
    pub efi_reserved1: uint_t,
    pub efi_altern_lba: diskaddr_t,
    pub efi_reserved: [uint_t; 12usize],
    pub efi_parts: [dk_part; 1usize],
}
#[test]
fn bindgen_test_layout_dk_gpt() {
    const UNINIT: ::std::mem::MaybeUninit<dk_gpt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_gpt>(),
        240usize,
        concat!("Size of: ", stringify!(dk_gpt))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_gpt>(),
        8usize,
        concat!("Alignment of ", stringify!(dk_gpt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_nparts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_nparts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_part_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_part_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_lbasize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_lbasize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_last_lba) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_last_lba)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_first_u_lba) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_first_u_lba)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_last_u_lba) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_last_u_lba)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_disk_uguid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_disk_uguid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_reserved1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_altern_lba) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_altern_lba)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_reserved) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).efi_parts) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_gpt),
            "::",
            stringify!(efi_parts)
        )
    );
}
pub type dk_gpt_t = dk_gpt;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dk_efi {
    pub dki_lba: diskaddr_t,
    pub dki_length: len_t,
    pub dki_un: dk_efi__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dk_efi__bindgen_ty_1 {
    pub _dki_data: *mut efi_gpt_t,
    pub _dki_data_64: u64,
}
#[test]
fn bindgen_test_layout_dk_efi__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<dk_efi__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_efi__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(dk_efi__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_efi__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(dk_efi__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dki_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_efi__bindgen_ty_1),
            "::",
            stringify!(_dki_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dki_data_64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_efi__bindgen_ty_1),
            "::",
            stringify!(_dki_data_64)
        )
    );
}
#[test]
fn bindgen_test_layout_dk_efi() {
    const UNINIT: ::std::mem::MaybeUninit<dk_efi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_efi>(),
        24usize,
        concat!("Size of: ", stringify!(dk_efi))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_efi>(),
        8usize,
        concat!("Alignment of ", stringify!(dk_efi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dki_lba) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_efi),
            "::",
            stringify!(dki_lba)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dki_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_efi),
            "::",
            stringify!(dki_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dki_un) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_efi),
            "::",
            stringify!(dki_un)
        )
    );
}
pub type dk_efi_t = dk_efi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partition64 {
    pub p_type: uuid,
    pub p_partno: uint_t,
    pub p_resv1: uint_t,
    pub p_start: diskaddr_t,
    pub p_size: diskaddr_t,
}
#[test]
fn bindgen_test_layout_partition64() {
    const UNINIT: ::std::mem::MaybeUninit<partition64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<partition64>(),
        40usize,
        concat!("Size of: ", stringify!(partition64))
    );
    assert_eq!(
        ::std::mem::align_of::<partition64>(),
        8usize,
        concat!("Alignment of ", stringify!(partition64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(partition64),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_partno) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(partition64),
            "::",
            stringify!(p_partno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_resv1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(partition64),
            "::",
            stringify!(p_resv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(partition64),
            "::",
            stringify!(p_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(partition64),
            "::",
            stringify!(p_size)
        )
    );
}
extern "C" {
    pub fn efi_reserved_sectors(arg1: *mut dk_gpt) -> uint_t;
}
extern "C" {
    pub fn efi_alloc_and_init(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut *mut dk_gpt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn efi_alloc_and_read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut dk_gpt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn efi_write(arg1: ::std::os::raw::c_int, arg2: *mut dk_gpt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn efi_free(arg1: *mut dk_gpt);
}
extern "C" {
    pub fn efi_type(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn efi_err_check(arg1: *mut dk_gpt);
}
extern "C" {
    pub fn efi_auto_sense(
        fd: ::std::os::raw::c_int,
        arg1: *mut *mut dk_gpt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn efi_use_whole_disk(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type caddr32_t = u32;
pub type daddr32_t = i32;
pub type off32_t = i32;
pub type ino32_t = u32;
pub type blkcnt32_t = i32;
pub type fsblkcnt32_t = u32;
pub type fsfilcnt32_t = u32;
pub type id32_t = i32;
pub type major32_t = u32;
pub type minor32_t = u32;
pub type key32_t = i32;
pub type mode32_t = u32;
pub type uid32_t = u32;
pub type gid32_t = u32;
pub type nlink32_t = u32;
pub type dev32_t = u32;
pub type pid32_t = i32;
pub type size32_t = u32;
pub type ssize32_t = i32;
pub type time32_t = i32;
pub type clock32_t = i32;
pub type uintptr32_t = u32;
pub type intptr32_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval32 {
    pub tv_sec: time32_t,
    pub tv_usec: i32,
}
#[test]
fn bindgen_test_layout_timeval32() {
    const UNINIT: ::std::mem::MaybeUninit<timeval32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval32>(),
        8usize,
        concat!("Size of: ", stringify!(timeval32))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval32>(),
        4usize,
        concat!("Alignment of ", stringify!(timeval32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval32),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec32 {
    pub tv_sec: time32_t,
    pub tv_nsec: i32,
}
#[test]
fn bindgen_test_layout_timespec32() {
    const UNINIT: ::std::mem::MaybeUninit<timespec32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec32>(),
        8usize,
        concat!("Size of: ", stringify!(timespec32))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec32>(),
        4usize,
        concat!("Alignment of ", stringify!(timespec32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec32),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type timespec32_t = timespec32;
pub type timestruc32_t = timespec32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec32 {
    pub it_interval: timespec32,
    pub it_value: timespec32,
}
#[test]
fn bindgen_test_layout_itimerspec32() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec32>(),
        16usize,
        concat!("Size of: ", stringify!(itimerspec32))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec32>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerspec32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec32),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec32),
            "::",
            stringify!(it_value)
        )
    );
}
pub type itimerspec32_t = itimerspec32;
pub type blkaddr_t = daddr_t;
pub type blkaddr32_t = daddr32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_map {
    pub dkl_cylno: blkaddr_t,
    pub dkl_nblk: blkaddr_t,
}
#[test]
fn bindgen_test_layout_dk_map() {
    const UNINIT: ::std::mem::MaybeUninit<dk_map> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_map>(),
        16usize,
        concat!("Size of: ", stringify!(dk_map))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_map>(),
        8usize,
        concat!("Alignment of ", stringify!(dk_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_cylno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map),
            "::",
            stringify!(dkl_cylno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_nblk) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map),
            "::",
            stringify!(dkl_nblk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_map32 {
    pub dkl_cylno: blkaddr32_t,
    pub dkl_nblk: blkaddr32_t,
}
#[test]
fn bindgen_test_layout_dk_map32() {
    const UNINIT: ::std::mem::MaybeUninit<dk_map32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_map32>(),
        8usize,
        concat!("Size of: ", stringify!(dk_map32))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_map32>(),
        4usize,
        concat!("Alignment of ", stringify!(dk_map32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_cylno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map32),
            "::",
            stringify!(dkl_cylno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_nblk) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map32),
            "::",
            stringify!(dkl_nblk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_map2 {
    pub p_tag: u16,
    pub p_flag: u16,
}
#[test]
fn bindgen_test_layout_dk_map2() {
    const UNINIT: ::std::mem::MaybeUninit<dk_map2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_map2>(),
        4usize,
        concat!("Size of: ", stringify!(dk_map2))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_map2>(),
        2usize,
        concat!("Alignment of ", stringify!(dk_map2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map2),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_map2),
            "::",
            stringify!(p_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dkl_partition {
    pub p_tag: u16,
    pub p_flag: u16,
    pub p_start: blkaddr32_t,
    pub p_size: blkaddr32_t,
}
#[test]
fn bindgen_test_layout_dkl_partition() {
    const UNINIT: ::std::mem::MaybeUninit<dkl_partition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dkl_partition>(),
        12usize,
        concat!("Size of: ", stringify!(dkl_partition))
    );
    assert_eq!(
        ::std::mem::align_of::<dkl_partition>(),
        4usize,
        concat!("Alignment of ", stringify!(dkl_partition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dkl_partition),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dkl_partition),
            "::",
            stringify!(p_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dkl_partition),
            "::",
            stringify!(p_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dkl_partition),
            "::",
            stringify!(p_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_vtoc {
    pub v_bootinfo: [u32; 3usize],
    pub v_sanity: u32,
    pub v_version: u32,
    pub v_volume: [::std::os::raw::c_char; 8usize],
    pub v_sectorsz: u16,
    pub v_nparts: u16,
    pub v_reserved: [u32; 10usize],
    pub v_part: [dkl_partition; 16usize],
    pub timestamp: [time32_t; 16usize],
    pub v_asciilabel: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_dk_vtoc() {
    const UNINIT: ::std::mem::MaybeUninit<dk_vtoc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_vtoc>(),
        456usize,
        concat!("Size of: ", stringify!(dk_vtoc))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_vtoc>(),
        4usize,
        concat!("Alignment of ", stringify!(dk_vtoc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_bootinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_bootinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sanity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_sanity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_volume) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sectorsz) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_sectorsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_nparts) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_nparts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_part) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_asciilabel) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_vtoc),
            "::",
            stringify!(v_asciilabel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_label {
    pub dkl_vtoc: dk_vtoc,
    pub dkl_pcyl: u32,
    pub dkl_ncyl: u32,
    pub dkl_acyl: u16,
    pub dkl_bcyl: u16,
    pub dkl_nhead: u32,
    pub dkl_nsect: u32,
    pub dkl_intrlv: u16,
    pub dkl_skew: u16,
    pub dkl_apc: u16,
    pub dkl_rpm: u16,
    pub dkl_write_reinstruct: u16,
    pub dkl_read_reinstruct: u16,
    pub dkl_extra: [u16; 4usize],
    pub dkl_pad: [::std::os::raw::c_char; 12usize],
    pub dkl_magic: u16,
    pub dkl_cksum: u16,
}
#[test]
fn bindgen_test_layout_dk_label() {
    const UNINIT: ::std::mem::MaybeUninit<dk_label> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_label>(),
        512usize,
        concat!("Size of: ", stringify!(dk_label))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_label>(),
        4usize,
        concat!("Alignment of ", stringify!(dk_label))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_vtoc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_vtoc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_pcyl) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_pcyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_ncyl) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_ncyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_acyl) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_acyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_bcyl) as usize - ptr as usize },
        466usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_bcyl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_nhead) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_nhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_nsect) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_nsect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_intrlv) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_intrlv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_skew) as usize - ptr as usize },
        478usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_skew)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_apc) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_apc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_rpm) as usize - ptr as usize },
        482usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_rpm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_write_reinstruct) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_write_reinstruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_read_reinstruct) as usize - ptr as usize },
        486usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_read_reinstruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_extra) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_pad) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_magic) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkl_cksum) as usize - ptr as usize },
        510usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_label),
            "::",
            stringify!(dkl_cksum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fk_label {
    pub fkl_type: uchar_t,
    pub fkl_magich: uchar_t,
    pub fkl_magicl: uchar_t,
    pub filler: uchar_t,
}
#[test]
fn bindgen_test_layout_fk_label() {
    const UNINIT: ::std::mem::MaybeUninit<fk_label> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fk_label>(),
        4usize,
        concat!("Size of: ", stringify!(fk_label))
    );
    assert_eq!(
        ::std::mem::align_of::<fk_label>(),
        1usize,
        concat!("Alignment of ", stringify!(fk_label))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fkl_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fk_label),
            "::",
            stringify!(fkl_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fkl_magich) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fk_label),
            "::",
            stringify!(fkl_magich)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fkl_magicl) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fk_label),
            "::",
            stringify!(fkl_magicl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filler) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(fk_label),
            "::",
            stringify!(filler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_devid {
    pub dkd_rev_hi: uchar_t,
    pub dkd_rev_lo: uchar_t,
    pub dkd_flags: uchar_t,
    pub dkd_devid: [uchar_t; 505usize],
    pub dkd_checksum3: uchar_t,
    pub dkd_checksum2: uchar_t,
    pub dkd_checksum1: uchar_t,
    pub dkd_checksum0: uchar_t,
}
#[test]
fn bindgen_test_layout_dk_devid() {
    const UNINIT: ::std::mem::MaybeUninit<dk_devid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dk_devid>(),
        512usize,
        concat!("Size of: ", stringify!(dk_devid))
    );
    assert_eq!(
        ::std::mem::align_of::<dk_devid>(),
        1usize,
        concat!("Alignment of ", stringify!(dk_devid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_rev_hi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_rev_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_rev_lo) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_rev_lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_devid) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_devid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_checksum3) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_checksum3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_checksum2) as usize - ptr as usize },
        509usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_checksum2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_checksum1) as usize - ptr as usize },
        510usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_checksum1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkd_checksum0) as usize - ptr as usize },
        511usize,
        concat!(
            "Offset of field: ",
            stringify!(dk_devid),
            "::",
            stringify!(dkd_checksum0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct partition {
    pub p_tag: ushort_t,
    pub p_flag: ushort_t,
    pub p_start: daddr_t,
    pub p_size: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_partition() {
    const UNINIT: ::std::mem::MaybeUninit<partition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<partition>(),
        24usize,
        concat!("Size of: ", stringify!(partition))
    );
    assert_eq!(
        ::std::mem::align_of::<partition>(),
        8usize,
        concat!("Alignment of ", stringify!(partition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(partition),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(partition),
            "::",
            stringify!(p_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(partition),
            "::",
            stringify!(p_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(partition),
            "::",
            stringify!(p_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vtoc {
    pub v_bootinfo: [::std::os::raw::c_ulong; 3usize],
    pub v_sanity: ::std::os::raw::c_ulong,
    pub v_version: ::std::os::raw::c_ulong,
    pub v_volume: [::std::os::raw::c_char; 8usize],
    pub v_sectorsz: ushort_t,
    pub v_nparts: ushort_t,
    pub v_reserved: [::std::os::raw::c_ulong; 10usize],
    pub v_part: [partition; 16usize],
    pub timestamp: [time_t; 16usize],
    pub v_asciilabel: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_vtoc() {
    const UNINIT: ::std::mem::MaybeUninit<vtoc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vtoc>(),
        776usize,
        concat!("Size of: ", stringify!(vtoc))
    );
    assert_eq!(
        ::std::mem::align_of::<vtoc>(),
        8usize,
        concat!("Alignment of ", stringify!(vtoc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_bootinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_bootinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sanity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_sanity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_volume) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sectorsz) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_sectorsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_nparts) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_nparts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_reserved) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_part) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_asciilabel) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(vtoc),
            "::",
            stringify!(v_asciilabel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extpartition {
    pub p_tag: ushort_t,
    pub p_flag: ushort_t,
    pub p_pad: [ushort_t; 2usize],
    pub p_start: diskaddr_t,
    pub p_size: diskaddr_t,
}
#[test]
fn bindgen_test_layout_extpartition() {
    const UNINIT: ::std::mem::MaybeUninit<extpartition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extpartition>(),
        24usize,
        concat!("Size of: ", stringify!(extpartition))
    );
    assert_eq!(
        ::std::mem::align_of::<extpartition>(),
        8usize,
        concat!("Alignment of ", stringify!(extpartition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extpartition),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(extpartition),
            "::",
            stringify!(p_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(extpartition),
            "::",
            stringify!(p_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(extpartition),
            "::",
            stringify!(p_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(extpartition),
            "::",
            stringify!(p_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extvtoc {
    pub v_bootinfo: [u64; 3usize],
    pub v_sanity: u64,
    pub v_version: u64,
    pub v_volume: [::std::os::raw::c_char; 8usize],
    pub v_sectorsz: ushort_t,
    pub v_nparts: ushort_t,
    pub pad: [ushort_t; 2usize],
    pub v_reserved: [u64; 10usize],
    pub v_part: [extpartition; 16usize],
    pub timestamp: [u64; 16usize],
    pub v_asciilabel: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_extvtoc() {
    const UNINIT: ::std::mem::MaybeUninit<extvtoc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<extvtoc>(),
        776usize,
        concat!("Size of: ", stringify!(extvtoc))
    );
    assert_eq!(
        ::std::mem::align_of::<extvtoc>(),
        8usize,
        concat!("Alignment of ", stringify!(extvtoc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_bootinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_bootinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sanity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_sanity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_version) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_volume) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_sectorsz) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_sectorsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_nparts) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_nparts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_reserved) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_part) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_part)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_asciilabel) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(extvtoc),
            "::",
            stringify!(v_asciilabel)
        )
    );
}
extern "C" {
    pub fn read_vtoc(arg1: ::std::os::raw::c_int, arg2: *mut vtoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_vtoc(arg1: ::std::os::raw::c_int, arg2: *mut vtoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_extvtoc(arg1: ::std::os::raw::c_int, arg2: *mut extvtoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_extvtoc(arg1: ::std::os::raw::c_int, arg2: *mut extvtoc) -> ::std::os::raw::c_int;
}
